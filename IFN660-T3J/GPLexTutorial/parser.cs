// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  RAGNOROS
// DateTime: 31/05/2017 12:01:53 AM
// UserName: Awal
// Input file <parser.y - 30/05/2017 11:59:52 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using GPLexTutorial.AST;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,NUMBER=129,IDENT=130,IF=131,ELSE=132,
    INT=133,BOOL=134,ABSTRACT=135,OPERATOR=136,PUBLIC=137,CLASS=138,
    STATIC=139,VOID=140,WHILE=141,TRUE=142,FALSE=143};

public struct ValueType
#line 10 "parser.y"
{
	public Expression expr;
	public Statement stmt;
	public UnAnnType type;
	public System.Collections.Generic.List<Statement> stmts;

    
    public string binary; // seth   
	public string bol;//XinRu
	public bool boolAnswer;
	public string charValue;  //Boyu
	public string fnum; // shilpa
	public string hex; // seth
	public string hnum;  //shilpa
	public string name;
	public string nul; // Shashank
    public int num;
    public string oct; // seth
	public string operat; //Alex
	public string seperator; // frank
    public string strValue;  //Qianyu
	
	public CompilationUnit compilationUnit;
	public ClassModifier classModifier;
	public List<ClassModifier> classModifiers;
	public Expression expression;
	public List<Expression> expressions;
	public ExpressionStatement expressionStatement;
	public FormalParameter formalParameter;
	public List<FormalParameter> formalParameterList;	
	public IdentifierExpression identifierExpression;
	public ImportDeclaration importDeclaration;
	public MethodDeclaration methodDeclaration;
	public List<MethodDeclaration> methodDeclarations;
	public MethodHeader methodHeader;
	public MethodDeclarator methodDeclarator;
	public MethodModifier methodModifier;
	public List<MethodModifier> methodModifiers;
	public NormalClassDeclaration normalClassDeclaration;
	public PackageDeclaration packageDeclaration;
	public IntType IntType;
	public Result result;
	public Statement statement;
	public TypeDeclaration typeDeclaration;																		// follow this if you are doing $$
	public List<TypeDeclaration> typeDeclarations;																// follow this if you are doing $$	
	public List<Statement> statements;
	public UnAnnArrayType arType;
	public UnAnnType unannType;
	public VariableDeclaration variableDeclaration;
	public List<VariableDeclaration> variableDeclarations;
	public VariableModifier variableModifier;
	public List<VariableModifier> variableModifiers;	
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 30/05/2017 11:59:52 PM
#line 6 "parser.y"
public static Statement root;
#line default
  // End verbatim content from parser.y - 30/05/2017 11:59:52 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[21];
  private static State[] states = new State[31];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "Expression", "Statement", "UnAnnType", "StatementList", 
      "MethodModifier", "MethodModifiers", "Program", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{131,5,123,12,129,24,130,25,133,29,134,30},new int[]{-8,1,-1,3,-3,4,-2,16,-4,26});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{40,6});
    states[6] = new State(new int[]{129,24,130,25},new int[]{-2,7});
    states[7] = new State(new int[]{41,8,61,18,43,20,60,22});
    states[8] = new State(new int[]{131,5,123,12,129,24,130,25,133,29,134,30},new int[]{-3,9,-2,16,-4,26});
    states[9] = new State(new int[]{132,10});
    states[10] = new State(new int[]{131,5,123,12,129,24,130,25,133,29,134,30},new int[]{-3,11,-2,16,-4,26});
    states[11] = new State(-8);
    states[12] = new State(-15,new int[]{-5,13});
    states[13] = new State(new int[]{125,14,131,5,123,12,129,24,130,25,133,29,134,30},new int[]{-3,15,-2,16,-4,26});
    states[14] = new State(-9);
    states[15] = new State(-14);
    states[16] = new State(new int[]{59,17,61,18,43,20,60,22});
    states[17] = new State(-10);
    states[18] = new State(new int[]{129,24,130,25},new int[]{-2,19});
    states[19] = new State(new int[]{61,-18,43,20,60,22,59,-18,41,-18});
    states[20] = new State(new int[]{129,24,130,25},new int[]{-2,21});
    states[21] = new State(-19);
    states[22] = new State(new int[]{129,24,130,25},new int[]{-2,23});
    states[23] = new State(new int[]{61,-20,43,20,41,-20,59,-20});
    states[24] = new State(-16);
    states[25] = new State(-17);
    states[26] = new State(new int[]{130,27});
    states[27] = new State(new int[]{59,28});
    states[28] = new State(-11);
    states[29] = new State(-12);
    states[30] = new State(-13);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-9, new int[]{-8,128});
    rules[2] = new Rule(-8, new int[]{-1});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-6, new int[]{137});
    rules[5] = new Rule(-6, new int[]{139});
    rules[6] = new Rule(-7, new int[]{-7,-6});
    rules[7] = new Rule(-7, new int[]{});
    rules[8] = new Rule(-3, new int[]{131,40,-2,41,-3,132,-3});
    rules[9] = new Rule(-3, new int[]{123,-5,125});
    rules[10] = new Rule(-3, new int[]{-2,59});
    rules[11] = new Rule(-3, new int[]{-4,130,59});
    rules[12] = new Rule(-4, new int[]{133});
    rules[13] = new Rule(-4, new int[]{134});
    rules[14] = new Rule(-5, new int[]{-5,-3});
    rules[15] = new Rule(-5, new int[]{});
    rules[16] = new Rule(-2, new int[]{129});
    rules[17] = new Rule(-2, new int[]{130});
    rules[18] = new Rule(-2, new int[]{-2,61,-2});
    rules[19] = new Rule(-2, new int[]{-2,43,-2});
    rules[20] = new Rule(-2, new int[]{-2,60,-2});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // CompilationUnit -> Statement
#line 91 "parser.y"
                 {root = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 4: // MethodModifier -> PUBLIC
#line 95 "parser.y"
                     {CurrentSemanticValue.methodModifier = MethodModifier.PUBLIC;}
#line default
        break;
      case 5: // MethodModifier -> STATIC
#line 96 "parser.y"
                           {CurrentSemanticValue.methodModifier = MethodModifier.STATIC;}
#line default
        break;
      case 6: // MethodModifiers -> MethodModifiers, MethodModifier
#line 100 "parser.y"
                                       {CurrentSemanticValue.methodModifiers = ValueStack[ValueStack.Depth-2].methodModifiers; CurrentSemanticValue.methodModifiers.Add(ValueStack[ValueStack.Depth-1].methodModifier);}
#line default
        break;
      case 7: // MethodModifiers -> /* empty */
#line 101 "parser.y"
                         {CurrentSemanticValue.methodModifiers = new List<MethodModifier>();}
#line default
        break;
      case 8: // Statement -> IF, '(', Expression, ')', Statement, ELSE, Statement
#line 106 "parser.y"
                                                           { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 9: // Statement -> '{', StatementList, '}'
#line 107 "parser.y"
                                        { CurrentSemanticValue.stmt = new CompoundStatement(ValueStack[ValueStack.Depth-2].stmts);   }
#line default
        break;
      case 10: // Statement -> Expression, ';'
#line 108 "parser.y"
                             { CurrentSemanticValue.stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 11: // Statement -> UnAnnType, IDENT, ';'
#line 109 "parser.y"
                                 { CurrentSemanticValue.stmt = new VariableDeclaration(ValueStack[ValueStack.Depth-3].type,ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 12: // UnAnnType -> INT
#line 112 "parser.y"
                            { CurrentSemanticValue.type = new IntType(); }
#line default
        break;
      case 13: // UnAnnType -> BOOL
#line 113 "parser.y"
                              { CurrentSemanticValue.type = new BoolType(); }
#line default
        break;
      case 14: // StatementList -> StatementList, Statement
#line 116 "parser.y"
                                                { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt);    }
#line default
        break;
      case 15: // StatementList -> /* empty */
#line 117 "parser.y"
                                    { CurrentSemanticValue.stmts = new List<Statement>(); }
#line default
        break;
      case 16: // Expression -> NUMBER
#line 120 "parser.y"
                              { CurrentSemanticValue.expr = new NumberExpression(ValueStack[ValueStack.Depth-1].num);         }
#line default
        break;
      case 17: // Expression -> IDENT
#line 121 "parser.y"
                             { CurrentSemanticValue.expr = new IdentifierExpression(ValueStack[ValueStack.Depth-1].name);     }
#line default
        break;
      case 18: // Expression -> Expression, '=', Expression
#line 122 "parser.y"
                                      { CurrentSemanticValue.expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 19: // Expression -> Expression, '+', Expression
#line 123 "parser.y"
                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr,'+',ValueStack[ValueStack.Depth-1].expr);  }
#line default
        break;
      case 20: // Expression -> Expression, '<', Expression
#line 124 "parser.y"
                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr,'<',ValueStack[ValueStack.Depth-1].expr);  }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 128 "parser.y"

int yywrap()
{
    return 1;
}

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
