%namespace GPLexTutorial
%using GPLexTutorial.AST

%{
public static CompilationUnit root;
%}

%union
{
    public int num;
    public string name;
    public string fnum; // shilpa
	public string hnum;  //shilpa
    public string oct; // seth
    public string hex; // seth
    public string binary; // seth     
    public string seperator; // frank
    public string strValue;  //Qianyu
    public string charValue;  //Boyu
    public string bol;//XinRu
    public string nul; // Shashank
    public string operat; //Alex
	
	public Block block;                                    // try to add new definitions alphabetically
	public Modifier modifier;
	public CompilationUnit compilationUnit;
	public ClassBody classBody;
	public Expression expression;
	public Expression leftHandSide;
	public ExpressionStatement expressionStatement;
	public FormalParameter formalParameter;
	public IdentifierExpression identifierExpression;
	public ImportDeclaration importDeclaration;
	public MethodDeclaration methodDeclaration;
	public MethodHeader methodHeader;
	public MethodBody methodBody;
	public MethodDeclarator methodDeclarator;
	public NormalClassDeclaration normalClassDeclaration;
	public PackageDeclaration packageDeclaration;
	public PrimitiveType primitiveType;
	public Result result;
	public Statement statement;
	public TypeDeclaration typeDeclaration;          // follow this if you are doing $$
	public UnAnnArrayType arType;
	public UnAnnType unannType;
	public VariableDeclaratorId variableDeclaratorId;
	public List<Modifier> modifiers;
	public List<ClassBody> classBodys;
	public List<FormalParameter> formalParameterList_opt;	
	public List<MethodDeclaration> methodDeclarations;
	public List<Statement> statements;
	public List<TypeDeclaration> typeDeclarations;       // follow this if you are doing $$
}

%type <block> Block
%type <compilationUnit> CompilationUnit 
%type <modifier> Modifier
%type <classBody> ClassBody
%type <expression> Expression
%type <expressionStatement> Statement
%type <formalParameter> FormalParameter
%type <normalClassDeclaration> NormalClassDeclaration
/*%type <identifierExpression> Identifier*/
%type <importDeclaration> ImportDeclaration
%type <leftHandSide> LeftHandSide
%type <methodDeclaration> MethodDeclaration
%type <methodHeader> MethodHeader
%type <methodBody> MethodBody
%type <methodDeclarator> MethodDeclarator
%type <packageDeclaration> PackageDeclaration
%type <primitiveType> PrimitiveType
%type <result> Result
%type <statement> Statement
%type <unannType> UnAnnType
%type <variableDeclaratorId> VariableDeclaratorId
%type <unannType> UnAnnType
%type <arType> UnAnnArrayType
%type <typeDeclarations> TypeDeclarations // follow this if you are doing $$
%type <modifiers> Modifiers
%type <methodDeclarations> MethodDeclarations
%type <formalParameterList_opt> FormalParameterList_opt
%type <statements> StatementList

%token <num> NUMBER
%token <name> IDENT
%token <name> IdentifierChars
%token <fnum> DecimalFLoatingPointLiteral
%token <hnum> HexaDecimalFLoatingPointLiteral
%token <oct> OctalIntegerLiteral
%token <hex> HexIntegerLiteral
%token <binary> BinaryIntegerLiteral
%token <seperator> SEPERATOR
%token <strValue> StringLiteral
%token <charValue> CharacterLiteral
%token <bol> BooleanLiteral
%token <nul> Nulliteral
%token <operat> OPERATOR
%token IF ELSE INT BOOL ABSTRACT OPERATOR PUBLIC CLASS STATIC VOID WHILE

%left '='
%nonassoc '<'
%left '+'


%%

Program 
	: CompilationUnit			{ root = $1; }
	;

Empty :
	;


CompilationUnit
	: PackageDeclaration ImportDeclaration TypeDeclarations		{ $$ = new CompilationUnit($1, $2, $3); } // follow this if you are doing $$
	;

PackageDeclaration_opt
	: PackageDeclaration
	| Empty
	;

PackageDeclaration
	: /*fixme*/
	;

ImportDeclarations
	: ImportDeclaration ImportDeclarations
	| Empty 
	; 

ImportDeclaration
	: //fixme
	;

TypeDeclarations
	: ClassDeclaration 
	;
	
ClassDeclaration
	: NormalClassDeclaration
	| /* enumdeclaration */
	;

NormalClassDeclaration
	: Modifiers CLASS IdentifierChars TypeParameters_opt Superclass_opt Superinterfaces_opt ClassBody    { $$ = new NormalClassDeclaration($1, $3, $7);}
	;

Modifiers
	: Modifier Modifiers
	| Empty
	;

Modifier
	: PUBLIC        
	| STATIC        
	| /* other stuff */
	;
	
TypeParameters_opt
	: /* fixme */
	;

Superclass_opt
	: /* fixme */
	;
	
Superinterfaces_opt
	: /* fixme */
	;
	
ClassBody
	: '{' MethodDeclarations '}'     {$$ = new ClassBody($2);}
	;

ClassBodyDeclarations
	: ClassBodyDeclaration ClassBodyDeclarations
	| Empty
	;


ClassBodyDeclaration
	: ClassMemberDeclaration
	| /* InstanceInitializer, StaticInitializer, ConstructorInitalizier */
	;


ClassMemberDeclaration
	: MethodDeclaration 
	| /* FieldDeclaration, ClassDeclaration, InterfaceDeclaration */
	;

MethodDeclarations
	: MethodDeclaration MethodDeclarations
	| Empty
	;

MethodDeclaration
	: Modifiers MethodHeader MethodBody    {$$ = new MethodDeclaration($1,$2,$3);}
	;


MethodHeader	
	: Result MethodDeclarator /* Throws_opt */		{$$ = new MethodHeader($1,$2);	}
	| /* other stuff */
	;

Result
	: // VOID 
	| UnAnnType										{ $$ = new Result($1);			}	
	;

UnAnnType
    : PrimitiveType    
	| UnAnnArrayType
	;
PrimitiveType
   : VOID
   | INT
   ;
UnAnnArrayType
    : /*empty*/
	;
MethodDeclarator
	: IdentifierChars '(' FormalParameterList_opt ')' Dims_opt  {$$ = new MethodDeclarator($1, $3);}
	;

Dims_opt
	: Empty
	;

FormalParameterList_opt
	: FormalParameterList
	| Empty
	;

FormalParameterList
	: LastFormalParameter
	| /* fixme  */
	;
	
LastFormalParameter
	: FormalParameter
	| /* fixme */
	;

FormalParameter
	: Modifiers UnAnnArrayType VariableDeclaratorId {$$ = new FormalParameter($2, $3);}
	;



VariableDeclaratorId
	: IdentifierChars Dims_opt
	;

MethodBody
	: Block       {$$ = new MethodBody($1);}
	| ';'
	;

Block
	: '{' Statement '}'    {$$ = new Block($2); }
	| ';'
	;

LocalVariableDeclarationStatement
	: LocalVariableDeclaration
	;

LocalVariableDeclaration
	: Modifiers UnAnnType VariableDeclaratorList
	;

VariableDeclaratorList
	: VariableDeclarator ',' VariableDeclarators
	| /* fixme */
	;

VariableDeclarators
	: VariableDeclarator VariableDeclarators
	| Empty
	;

VariableDeclarator
	: VariableDeclaratorId '=' VariableInitializer_opt
	;

VariableDeclaratorId
	: IdentifierChars
	;

VariableInitializer_opt
	: Expression
	| /* ArrayInitializer */
	;

LeftHandSide
	: Expression
	| /* FieldAccess */
	| /* ArrayAccess */
	;

AssignmentOperator
	: '='
	;

StatementList : StatementList Statement
              | /* empty */
              ;
Statement : IF '(' Expression ')' Statement ELSE Statement	{ $$ = new IfStatement($3, $5, $7);		}
          | '{' StatementList '}'							{ $$ = new CompoundStatement($2);		}
          | Expression ';'									{ $$ = new ExpressionStatement($1);		}
          | PrimitiveType IDENT ';'							{ $$ = new VariableDeclaration($1, $2);	}
		  | IF Expression Statement							{ $$ = new DoStatement ($2, $3);		}
		  | WHILE Expression Statement						{ $$ = new WhileStatement ($2, $3);		}
          ;
Expression : NUMBER											{ $$ = new NumberExpression($1);		}
           | IDENT											{ $$ = new IdentifierExpression($1);	}
           | Expression '=' Expression						{ $$ = new AssignmentExpression($1, $3);}
           | Expression '+' Expression						{ $$ = new PlusExpression($1, $3);		}
           | Expression '<' Expression						{ $$ = new BinaryExpression($1,'<',$3);	}
           ;

%%

public Parser(Scanner scanner) : base(scanner)
{
}